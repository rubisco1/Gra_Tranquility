import pygame, sys,os
from pygame.locals import *
from pygame import mixer
from pygame.locals import (RLEACCEL, K_UP, K_DOWN, K_LEFT, K_RIGHT, K_ESCAPE, KEYDOWN, QUIT)

import pygame_menu
import random
import time

FPS = 60
FramePerSec = pygame.time.Clock()

SCREEN_WIDTH = 700
SCREEN_HEIGHT = 500

class Fish(pygame.sprite.Sprite):
    def __init__(self):
        super(Fish, self).__init__()
        fishes = ["blob2.png", "rybka1.png", "rybka2.png"]
        random_fish = random.randint(0, 2)
        self.surf = pygame.image.load(fishes[random_fish]).convert()
        #self.surf = pygame.Surface((36,36))
        self.surf.set_colorkey((255, 255, 255), RLEACCEL)
        self.rect = self.surf.get_rect(center = (random.randint(SCREEN_WIDTH + 20, SCREEN_WIDTH + 100),
                random.randint(0, SCREEN_HEIGHT),))
        self.speed = 3
    def update(self):
        self.rect.move_ip(-self.speed, 0)
        #if self.rect.right < 0:
    def speedup(self):
        self.speed = 6

class Fruit(pygame.sprite.Sprite):
    def __init__(self):
        super(Fruit, self).__init__()
        self.surf = pygame.image.load("owocek.png").convert()
        #self.surf = pygame.Surface((36,36))
        self.surf.set_colorkey((255, 255, 255), RLEACCEL)
        self.rect = self.surf.get_rect(center = (random.randint(SCREEN_WIDTH + 20, SCREEN_WIDTH + 100),
                random.randint(0, SCREEN_HEIGHT),))
        self.speed = 2
    def update(self):
        self.rect.move_ip(-self.speed, 0)   

class Shark (pygame.sprite.Sprite):
    def __init__(self):
        super(Shark, self).__init__()
        self.surf = pygame.image.load("rekin.png").convert()
        self.surf.set_colorkey((255, 255, 255), RLEACCEL)
        self.rect = self.surf.get_rect(center = (50, 250))

    def update(self, klawisze_wcisniete):
        if klawisze_wcisniete[K_UP]:
            self.rect.move_ip(0, -5)
        if klawisze_wcisniete[K_DOWN]:
            self.rect.move_ip(0, 5)
        if self.rect.top <= 0:
            self.rect.top = 0
        if self.rect.bottom >= SCREEN_HEIGHT:
            self.rect.bottom = SCREEN_HEIGHT
            
def countdown_delay(init_num):
# countdown before game start
   clock = pygame.time.Clock()

   counter, text = init_num, str(init_num).rjust(3)
   pygame.time.set_timer(pygame.USEREVENT, 1000)
   counter_font = pygame.font.Font("freesansbold.ttf", 20)

   # countdown loop
   running = True
   while running:
       for event in pygame.event.get():
           if event.type == pygame.USEREVENT: 
               counter -= 1
               text = str(counter).rjust(3) if counter > 0 else 'Start!'
           if event.type == pygame.QUIT: 
               running = False

       screen.blit(tlo_morze, (0,0))
       screen.blit(counter_font.render(text, True, (255, 255, 255)), (SCREEN_WIDTH/2, SCREEN_HEIGHT/2))
       pygame.display.update()
       pygame.display.flip()
       clock.tick(60)
       if counter == 0:
           running = False

   pygame.time.delay(1000)

def menu():
    menu = True
    selected = "start"

    while menu:
        for event in pygame.event.get():
            if event.type==pygame.QUIT:
                pygame.quit()
                quit()
            if event.type==pygame.KEYDOWN:
                if event.key==pygame.K_UP:
                    selected="start"
                elif event.key==pygame.K_DOWN:
                    selected="quit"
                if event.key==pygame.K_RETURN:
                    if selected=="start":
                        print("Start")
                    if selected=="quit":
                        pygame.quit()
                        quit()


def text_format(message, textFont, textSize, textColor):
    white=(255, 255, 255)
    black=(0, 0, 0)
    gray=(50, 50, 50)
    red=(255, 0, 0)
    green=(0, 255, 0)
    blue=(0, 0, 255)
    yellow=(255, 255, 0)
    newFont = pygame.font.Font("freesansbold.ttf",20)
    newText = newFont.render(message, "freesansbold.ttf",20, white)

    return newText

pygame.display.set_caption("Tranquility")
icon = pygame.image.load('rekin.png')
pygame.display.set_icon(icon)
tlo_morze=pygame.image.load('tlo.jpg')
screen = pygame.display.get_surface()

# smooth moving the player 
pygame.key.set_repeat(10,10)

pygame.init()

screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))

# menu = pygame_menu.Menu(300, 400, 'Welcome',
#                        theme=pygame_menu.themes.THEME_BLUE)

# menu.add.text_input("IMIĘ :" ,default = "wpisz swoje imię")
# menu.add.button("WYJŚCIE", pygame_menu.events.EXIT)

# menu.mainloop(screen)

# music in the background
mixer.music.load("muzyczka.mp3")
mixer.music.play(-1) #żeby muzyczka grała w pętli

# Create a custom event for adding a new enemy.
ADDENEMY = pygame.USEREVENT + 1
pygame.time.set_timer(ADDENEMY, 250) # wartość w nawiasie należy zwiększać w zależności od wydajności komputera

# Create our 'player'
player = Shark()

# Create groups to hold enemy sprites, and every sprite
# - enemies is used for collision detection and position updates
# - all_sprites is used for rendering
enemies = pygame.sprite.Group()
all_sprites = pygame.sprite.Group()
all_sprites.add(player)

# Variable to keep our main loop running
global points
points = 0
running = True

# Our main loop
while running:
    # Look at every event in the queue
    for event in pygame.event.get():
        # Did the user hit a key?
        if event.type == KEYDOWN:
            # Was it the Escape key? If so, stop the loop
            if event.key == K_ESCAPE:
                running = False

        # Did the user click the window close button? If so, stop the loop
        elif event.type == QUIT:
            running = False

        # Should we add a new enemy?
        elif event.type == ADDENEMY:
        
            # Create the new enemy, and add it to our sprite groups
            if points < 50 and len(enemies)<1:
                new_enemy = Fish ()
            elif points == 50 and len (enemies) == 0:
                new_enemy = Fruit ()
            elif points >50 :
                new_enemy = Fish()
            enemies.add(new_enemy)
            all_sprites.add(new_enemy)

    # Get the set of keys pressed and check for user input
    pressed_keys = pygame.key.get_pressed()
    player.update(pressed_keys)

    # Update the position of our enemies
    enemies.update()

    # Fill the screen with black
    #screen.fill((0, 0, 0))
    screen.blit(tlo_morze, (0,0))

    #global points
    #points = 0
    score_font = pygame.font.Font("freesansbold.ttf",20)
    score_on_X = 570
    score_on_Y = 10

    def score_text(x,y):
        score = score_font.render("SCORE: " + str(points), True, (255,255,255))
        screen.blit(score, (x,y))

    # show the score
    score_text(score_on_X, score_on_Y)

    # draw all our sprites
    for entity in all_sprites:
        screen.blit(entity.surf, entity.rect)

    # check if any enemies have collided with the player
    # If so, remove the player and stop the loop
    for entity in enemies:
        if pygame.sprite.spritecollide(player, enemies, True):
            enemies.remove (entity)
            entity.kill()
            points +=1
        elif entity.rect.left < 0:
                player.kill()
                running = False
            
    if points > 50:
        for entity in enemies:
            entity.speedup()
            
    if points == 50:
        mixer.music.stop()
        mixer.music.unload()
        
    if not pygame.mixer.music.get_busy():
        mixer.music.load("Synapsis.mp3")
        mixer.music.play(-1)

    # Flip everything to the display
    pygame.display.flip()
    FramePerSec.tick(FPS)

    def set_gameover(self, message = "Game Over"):
        self.gameover = True
        images = []
        font = util.load_font("Cosmetica", 40) #pygame.font.Font(pygame.font.get_default_font(), 36)
        height = 0
        width = 0
        
pygame.init()
        
while True:
    for event in pygame.event.get():
        # catch window closing
        if event.type == QUIT:
            pygame.quit()
            sys.exit()

GAMEWINDOW.fill((0, 0, 0))
rysuj_plansze()
rysuj_pole_gry()
if WIN:
    drukuj_wynik(WIN)
elif WIN is False:
    print ("Przegrałeś")

pygame.display.update()
