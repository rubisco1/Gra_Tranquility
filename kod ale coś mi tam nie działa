import pygame, sys,os
from pygame.locals import *
from pygame import mixer
from pygame.locals import (RLEACCEL, K_UP, K_DOWN, K_LEFT, K_RIGHT, K_ESCAPE, KEYDOWN, QUIT)

import random

# Define constants for the screen width and height
SCREEN_WIDTH = 700
SCREEN_HEIGHT = 500

pygame.init()
#ustawienie etykiety z nazwą gry
pygame.display.set_caption("Tranquility")
#ikonka przy nazwie gry
icon = pygame.image.load('rekin.png')
pygame.display.set_icon(icon)
#ustawienie wymiarów okna wgranych
window=pygame.display.set_mode((700,500))
#plik graficzny, który robi za tło można potem zmienić
tlo_morze=pygame.image.load('tlo.jpg')
#pobranie informacji o ekranie-tle
screen = pygame.display.get_surface()
#przypisuje moją grafikę tła do określonego miejsca na ekranie
screen.blit(tlo_morze, (0,0))

#muzyczka w tle gry
# mixer.music.load("muzyczka.mp3")
# mixer.music.play(-1) #żeby muzyczka grała w pętli

#wstęp do menu
def text_format(tekst, textFont, textSize, textColor):
    newFont = pygame.font.Font(textFont, textSize)
    newText = newFont.render(message, 0, textColor)
    return newText

white=(255, 255, 255)
black=(0, 0, 0)
gray=(50, 50, 50)
red=(255, 0, 0)
green=(0, 255, 0)
blue=(0, 0, 255)
yellow=(255, 255, 0)

def menu():
    menu = True
    selected = "start"

    while menu:
        for event in pygame.event.get():
            if event.type==pygame.QUIT:
                pygame.quit()
                quit()
            if event.type==pygame.KEYDOWN:
                if event.key==pygame.K_UP:
                    selected="start"
                elif event.key==pygame.K_DOWN:
                    selected="quit"
                if event.key==pygame.K_RETURN:
                    if selected=="start":
                        print("Start")
                    if selected=="quit":
                        pygame.quit()
                        quit()


#def init():
#rekin.image = util.load_image

class Rekin (pygame.sprite.Sprite):
    def __init__(self):
        #pygame.sprite.Sprite.__init__(self)
        #screen = pygame.display.get_surface()
        #self.area = screen.get_rect()
        #self.image = "rekin.png"
        #self.rect = pygame.rect (SCREEN_WIDTH, 0, rekin.image.get_width(), rekin.image.get_height())
        #super(Rekin, self).__init()
        #self.surf = pygame.image.load("rekin.png").convert()
        #self.surf = pygame.Surface((36,36))
        #self.surf.set_colorkey((255, 255, 255), RLEACCEL)
        #self.rect = self.surf.get_rect(center = (random.radint(SCREEN_WIDTH), random.radint(0, SCREEN_HEIGHT),))
        super(Rekin, self).__init__()
        self.surf = pygame.image.load("rekin.png").convert()
        #self.surf = pygame.Surface((36,36))
        self.surf.set_colorkey((255, 255, 255), RLEACCEL)
        self.rect = self.surf.get_rect(center = (50, 250))

    def update(self, klawisze_wcisniete):#zmieniłam update bo to gracz
        if klawisze_wcisniete[K_UP]:
            self.rect.move_ip(0, -5)
        if klawisze_wcisniete[K_DOWN]:
            self.rect.move_ip(0, 5)
        if self.rect.top <= 0:
            self.rect.top = 0
        if self.rect.bottom >= SCREEN_HEIGHT:
            self.rect.bottom = SCREEN_HEIGHT

    def jem_rybki(self):
        # Check if any enemies have collided with the player
        if pygame.sprite.spritecollideany(player, enemy):
        # If so, then remove the player and stop the loop
            enemy.kill()
            score += 1

class Rybka(pygame.sprite.Sprite):
    def __init__(self):
        super(Rybka, self).__init__()
        self.surf = pygame.image.load("blob2.png").convert()
        #self.surf = pygame.Surface((36,36))
        self.surf.set_colorkey((255, 255, 255), RLEACCEL)
        self.rect = self.surf.get_rect(center = (random.randint(SCREEN_WIDTH + 20, SCREEN_WIDTH + 100),
                random.randint(0, SCREEN_HEIGHT),))
        self.speed = random.randint(3, 7)

    def update(self):
        self.rect.move_ip(-self.speed, 0)
        if self.rect.right < 0:
            self.kill()

class Owoc(pygame.sprite.Sprite):
    def __init__(self):
        super(Owoc, self).__init__()
        self.surf = pygame.image.load("owocek.png").convert()
        #self.surf = pygame.Surface((36,36))
        self.surf.set_colorkey((255, 255, 255), RLEACCEL)
        self.rect = self.surf.get_rect(center = (random.randint(SCREEN_WIDTH + 20, SCREEN_WIDTH + 100),
                random.randint(0, SCREEN_HEIGHT),))
        self.speed = random.randint(2, 4)
    def update(self):
        self.rect.move_ip(-self.speed, 0)
        if self.rect.right < 0:
            self.kill()


    # # Move the sprite based on speed
    # # Remove it when it passes the left edge of the screen
    # def update(self):
    #     self.rect.move_ip(-self.speed, 0)
    #     if self.rect.right < 0:
    #         self.kill()


# Initialize pygame
pygame.init()

# Create the screen object
# The size is determined by the constant SCREEN_WIDTH and SCREEN_HEIGHT
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))

# Create a custom event for adding a new enemy.
ADDENEMY = pygame.USEREVENT + 1
pygame.time.set_timer(ADDENEMY, 250)

owoc = Owoc()
przeciwnik = Rybka()
player = Rekin()

# Create groups to hold enemy sprites, and every sprite
# - enemies is used for collision detection and position updates
# - all_sprites is used for rendering
enemies = pygame.sprite.Group()
all_sprites = pygame.sprite.Group()
all_sprites.add(player)

# Variable to keep our main loop running
running = True

while running:
    for event in pygame.event.get():
        if event.type == KEYDOWN:
            if event.key == K_ESCAPE:
                running = False
        elif event.type == QUIT:
            running = False
    screen.fill((0, 0, 0))
    screen.blit(przeciwnik.surf, przeciwnik.rect)
    przeciwnik.update()
    screen.blit(owoc.surf, owoc.rect)
    owoc.update()
    pygame.display.flip()
    FramePerSec.tick(FPS)
#obsługa zdarzeń - pętla żeby okno się nie zamykało

for event in pygame.event.get():
    if event.type==pygame.QUIT:
        sys.exit(0)

#wyświetlanie wyniku
score_text(score_on_X, score_on_Y)
pygame.display.flip()

# początkowe położenie - oś X i oś Y
#player_on_X = 170
#player_on_Y = 200
# zmienne potrzebne do ruchu gracza - na osi X i osi Y
#player_move_X = 0
#player_move_Y = 0

# WYNIK - SCORE - wyświetla liczbę punktów w prawym górnym rogu
global points
points = 0
score_font = pygame.font.Font("freesansbold.ttf",20)
score_on_X = 570
score_on_Y = 10

def score_text(x,y):
    score = score_font.render("SCORE: " + str(points), True, (255,255,255))
    screen.blit(score, (x,y))
    
 #wyświetlanie wyniku
score_text(score_on_X, score_on_Y)
pygame.display.flip()

def player_appear():
    screen.blit(playerImg, (int(player_on_X), int(player_on_Y)))
    return player_appear()

    # Should we add a new enemy?
if event.type == ADDENEMY:
# Create the new enemy, and add it to our sprite groups
    new_enemy = Rybka()
    enemies.add(new_enemy)
    all_sprites.add(new_enemy)

# Get the set of keys pressed and check for user input
    pressed_keys = pygame.key.get_pressed()
    player.update(pressed_keys)

# Update the position of our enemies
enemies.update()



# Draw all our sprites
for entity in all_sprites:
    screen.blit(entity.surf, entity.rect)

# Check if any enemies have collided with the player
if pygame.sprite.spritecollideany(player, enemies):
    # If so, remove the player and stop the loop
    player.kill()
    running = False

    # Flip everything to the display
pygame.display.flip
